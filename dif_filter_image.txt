3c3
<                               FWHM_GAUSSIAN=fwhm, NO_FT_CONVOL=no_ft, PSF=psf
---
> 			      FWHM_GAUSSIAN=fwhm, NO_FT_CONVOL=no_ft
13c13
< ;       (using the IDL SMOOTH() or MEDIAN() functions).
---
> ;		(using the IDL smooth or median functions).
20,21c20
< ;       Result = filter_image( image, SMOOTH=width, MEDIAN = width, /ALL_PIXELS
< ;                               /ITERATE, FWHM =,  /NO_FT_CONVOL)
---
> ;	Result = filter_image( image, SMOOTH=box_width, /MEDIAN, /ALL )
28,29c27,28
< ;               for moving average, in # pixels.  /SMOOTH  means use box 
< ;               width = 3 pixels for smoothing.
---
> ;		for moving average, in # pixels.
> ;	/SMOOTH  means use box width = 3 pixels for smoothing.
31,39c30,35
< ;        MEDIAN = scalar (usually odd) integer specifying the width of square 
< ;               moving box for median filter, in # pixels.   /MEDIAN  means use
< ;               box width = 3 pixels for median filter.
< ;   
< ;       /ALL_PIXELS causes the edges of image to be filtered as well.   This
< ;               is accomplished by reflecting pixels adjacent to edges outward
< ;               (similar to the /EDGE_WRAP keyword in CONVOL).
< ;               Note that this is a different algorithm from the /EDGE_TRUCATE 
< ;               keyword to SMOOTH or CONVOL, which duplicates the nearest pixel.   
---
> ;	MEDIAN = scalar (odd) integer specifying the width of square moving 
> ;		box for median filter, in # pixels.
> ;	/MEDIAN  means use box width = 3 pixels for median filter.
> ;   
> ;	/ALL_PIXELS causes the edges of image to be filtered as well,
> ;		accomplished by reflecting pixels adjacent to edges outward.
54,67c50,53
< ;               with intrinsic IDL CONVOL function.   The default is to use 
< ;               FFT when factors of size are all LE 13.   Note that 
< ;               external function convolve.pro handles both cases)
< ;
< ; OPTIONAL INPUT/OUTPUT KEYWORD:
< ;     PSF = Array containing the PSF used during the convolution.   This 
< ;           keyword is only active if the FWHM_GAUSSIAN keyword is also 
< ;           specified.     If PSF is undefined on input, then upon output it
< ;           contains the Gaussian convolution specified by the FWHM_GAUSSIAN
< ;           keyword.    If the PSF array is defined on input then it is used 
< ;           as the convolution kernel,  the value of the  FWHM_GAUSSIAN keyword
< ;           is ignored.      Typically, on a first call set PSF to an undefined
< ;           variable, which can be reused for subsequent calls to prevent 
< ;           recalculation of the Gaussian PSF.
---
> ;		with IDL function convol.
> ;		The default is to use FFT when factors of size are all LE 13.
> ;		(note that external function convolve handles both cases)
> ;
91c77
< ;       function prime          ;all these called only if FWHM is specified
---
> ;	function prime		;all these called only if FWHM is specified.
94,100c80,83
< ;       If both /ALL_PIXELS (or /ITERATE)  keywords are set then
< ;       create a larger image by reflecting the edges outward, then call the 
< ;       IDL MEDIAN() or SMOOTH() function on the larger image, and just return 
< ;       the central part (the original size image).
< ;
< ;       NAN values are recognized during calls to MEDIAN() or SMOOTH(), but 
< ;       not for convolution with a Gaussian (FWHM keyword supplied). 
---
> ;	If /ALL_PIXELS or /ITERATE keywords are set then
> ;	create a larger image by reflecting the edges outward,
> ;	then call the IDL median and/or smooth function on the larger image,
> ;	and just return the central part (the orginal size image).
106,108d88
< ;       Use /EVEN call to median, recognize NAN values in SMOOTH 
< ;                  W. Landsman   June 2001
< ;       Added PSF keyword,   Bjorn Heijligers/WL, September 2001
110,116d89
< 
<   if N_params() LT 1 then begin
<       print,'Syntax - Result = filter_image( image, SMOOTH=width, /ALL_PIXELS'
<       print,'                 MEDIAN= width, ITERATE, FWHM=,  /NO_FT_CONVOL'
<       return, -1
<   endif
< 
168,172c141,142
<         if keyword_set( width_median ) then $
<                        imf = median(/even, imf, width_median>3 ) 
<                             
<         if keyword_set( width_smooth ) then $
<               imf = smooth( imf, width_smooth>3, /NAN )
---
> 	if keyword_set( width_median ) then imf = median( imf, width_median>3 )
> 	if keyword_set( width_smooth ) then imf = smooth( imf, width_smooth>3 )
178,179c148,149
<                         factor,sim[1],pfx,nfx,/quiet
<                         factor,sim[2],pfy,nfy,/quiet
---
> 			factor,sim[1],pfx,nfx
> 			factor,sim[2],pfy,nfy
183,185c153,154
<                 if N_elements(PSF) EQ 0 then $
<                           psf=psf_gaussian( NP=npix,FWHM=fwhm,/NORM )
<                 imf = convolve( imf,  NO_FT=no_ft, psf) 
---
> 		imf = convolve( imf, NO_FT=no_ft, $
> 				     psf_gaussian( NP=npix,FWHM=fwhm,/NORM ) )
188,190c157
<     if radius GT 0 then $
<                 return, imf[ radius:(Lx+radius), radius:(Ly+radius) ] $
<            else return, imf
---
> return, imf[ radius:(Lx+radius), radius:(Ly+radius) ]
